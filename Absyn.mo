public uniontype mod
	record MODULE
		list<stmt>	body;
	end MODULE;
end mod;

public uniontype stmt
	record FUNCTIONDEF
		String	name;
		arguments	args;
		list<stmt>	body;
		list<expr>	decorator_list;
		Option<expr>	returns;
	end FUNCTIONDEF;
	record CLASSDEF
		String	name;
		list<expr>	bases;
		list<keyword>	keywords;
		Option<expr>	starargs;
		Option<expr>	kwargs;
		list<stmt>	body;
		list<expr>	decorator_list;
	end CLASSDEF;
	record RETURN
		Option<expr>	value;
	end RETURN;
	record DELETE
		list<expr>	targets;
	end DELETE;
	record ASSIGN
		list<expr>	targets;
		expr	value;
	end ASSIGN;
	record AUGASSIGN
		expr	target;
		operator	op;
		expr	value;
	end AUGASSIGN;
	record FOR
		expr	target;
		expr	iter;
		list<stmt>	body;
		list<stmt>	orelse;
	end FOR;
	record WHILE
		expr	test;
		list<stmt>	body;
		list<stmt>	orelse;
	end WHILE;
	record IF
		expr	test;
		list<stmt>	body;
		list<stmt>	orelse;
	end IF;
	record WITH
		list<withitem>	items;
		list<stmt>	body;
	end WITH;
	record RAISE
		Option<expr>	exc;
		Option<expr>	cause;
	end RAISE;
	record TRY
		list<stmt>	body;
		list<excepthandler>	handlers;
		list<stmt>	orelse;
		list<stmt>	finalbody;
	end TRY;
	record ASSERT
		expr	test;
		Option<expr>	msg;
	end ASSERT;
	record IMPORT
		list<alias>	names;
	end IMPORT;
	record IMPORTFROM
		Option<identifier>	module;
		list<alias>	names;
		Option<String>	level;
	end IMPORTFROM;
	record GLOBAL
		list<identifier>	names;
	end GLOBAL;
	record NONLOCAL
		list<identifier>	names;
	end NONLOCAL;
	record EXPR
		expr	value;
	end EXPR;
	record PASS
	end PASS;
	record BREAK
	end BREAK;
	record CONTINUE
	end CONTINUE;
end stmt;

public uniontype expr
	record BOOLOP
		boolop	op;
		list<expr>	values;
	end BOOLOP;
	record BINOP
		expr	left;
		operator	op;
		expr	right;
	end BINOP;
	record UNARYOP
		unaryop	op;
		expr	operand;
	end UNARYOP;
	record LAMBDA
		arguments	args;
		expr	body;
	end LAMBDA;
	record IFEXP
		expr	test;
		expr	body;
		expr	orelse;
	end IFEXP;
	record DICT
		list<expr>	keys;
		list<expr>	values;
	end DICT;
	record SET
		list<expr>	elts;
	end SET;
	record LISTCOMP
		expr	elt;
		list<comprehension>	generators;
	end LISTCOMP;
	record SETCOMP
		expr	elt;
		list<comprehension>	generators;
	end SETCOMP;
	record DICTCOMP
		expr	key;
		expr	value;
		list<comprehension>	generators;
	end DICTCOMP;
	record GENERATOREXP
		expr	elt;
		list<comprehension>	generators;
	end GENERATOREXP;
	record YIELD
		Option<expr>	value;
	end YIELD;
	record YIELDFROM
		expr	value;
	end YIELDFROM;
	record COMPARE
		expr	left;
		list<cmpop>	ops;
		list<expr>	comparators;
	end COMPARE;
	record CALL
		expr	func;
		list<expr>	args;
		list<keyword>	keywords;
		Option<expr>	starargs;
		Option<expr>	kwargs;
	end CALL;
	record NUM
		String	n;
	end NUM;
	record STR
		String	s;
	end STR;
	record BYTES
		String	s;
	end BYTES;
	record NAMECONSTANT
		singleton	value;
	end NAMECONSTANT;
	record ELLIPSIS
	end ELLIPSIS;
	record ATTRIBUTE
		expr	value;
		String	attr;
		expr_context	ctx;
	end ATTRIBUTE;
	record SUBSCRIPT
		expr	value;
		slice	subscriptslice;
		expr_context	ctx;
	end SUBSCRIPT;
	record STARRED
		expr	value;
		expr_context	ctx;
	end STARRED;
	record NAME
		String	id;
		expr_context	ctx;
	end NAME;
	record LIST
		list<expr>	elts;
		expr_context	ctx;
	end LIST;
	record TUPLE
		list<expr>	elts;
		expr_context	ctx;
	end TUPLE;
end expr;

public uniontype expr_context
	record LOAD
	end LOAD;
	record STORE
	end STORE;
	record DEL
	end DEL;
	record AUGLOAD
	end AUGLOAD;
	record AUGSTORE
	end AUGSTORE;
	record PARAM
	end PARAM;
end expr_context;

public uniontype slice
	record SLICE
		Option<expr>	lower;
		Option<expr>	upper;
		Option<expr>	step;
	end SLICE;
	record EXTSLICE
		list<slice>	dims;
	end EXTSLICE;
	record INDEX
		expr	value;
	end INDEX;
end slice;

public uniontype boolop
	record AND
	end AND;
	record OR
	end OR;
end boolop;

public uniontype operator
	record ADD
	end ADD;
	record SUB
	end SUB;
	record MULT
	end MULT;
	record DIV
	end DIV;
	record MOD
	end MOD;
	record POW
	end POW;
	record LSHIFT
	end LSHIFT;
	record RSHIFT
	end RSHIFT;
	record BITOR
	end BITOR;
	record BITXOR
	end BITXOR;
	record BITAND
	end BITAND;
	record FLOORDIV
	end FLOORDIV;
end operator;

public uniontype unaryop
	record INVERT
	end INVERT;
	record NOT
	end NOT;
	record UADD
	end UADD;
	record USUB
	end USUB;
end unaryop;

public uniontype cmpop
	record EQ
	end EQ;
	record NOTEQ
	end NOTEQ;
	record LT
	end LT;
	record LTE
	end LTE;
	record GT
	end GT;
	record GTE
	end GTE;
	record IS
	end IS;
	record ISNOT
	end ISNOT;
	record IN
	end IN;
	record NOTIN
	end NOTIN;
end cmpop;

public uniontype comprehension
	record COMPREHENSION
		expr	target;
		expr	iter;
		list<expr>	ifs;
	end COMPREHENSION;
end comprehension;

public uniontype excepthandler
	record EXCEPTHANDLER
		Option<expr>	type;
		Option<identifier>	name;
		list<stmt>	body;
	end EXCEPTHANDLER;
end excepthandler;

public uniontype arguments
	record ARGUMENTS
		list<arg>	args;
		Option<arg>	vararg;
		list<arg>	kwonlyargs;
		list<expr>	kw_defaults;
		Option<arg>	kwarg;
		list<expr>	defaults;
	end ARGUMENTS;
end arguments;

public uniontype arg
	record ARG
		String	argid;
		Option<expr>	annotation;
	end ARG;
end arg;

public uniontype keyword
	record KEYWORD
		String	argid;
		expr	value;
	end KEYWORD;
end keyword;

public uniontype alias
	record ALIAS
		String	name;
		Option<identifier>	asname;
	end ALIAS;
end alias;

public uniontype withitem
	record WITHITEM
		expr	context_expr;
		Option<expr>	optional_vars;
	end WITHITEM;
end withitem;

public uniontype singleton
	record TRUE
	end TRUE;
	record FALSE
	end FALSE;
	record PYNONE
	end PYNONE;
end singleton;

