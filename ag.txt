mod : Module '(' '[' listof_stmt ']' ')' ;
stmt : FunctionDef '(' string ',' arguments ',' '[' listof_stmt ']' ',' '[' listof_expr ']' ',' optional_expr ')' | ClassDef '(' string ',' '[' listof_expr ']' ',' '[' listof_keyword ']' ',' optional_expr ',' optional_expr ',' '[' listof_stmt ']' ',' '[' listof_expr ']' ')' | Return '(' optional_expr ')' | Delete '(' '[' listof_expr ']' ')' | Assign '(' '[' listof_expr ']' ',' expr ')' | AugAssign '(' expr ',' operator ',' expr ')' | For '(' expr ',' expr ',' '[' listof_stmt ']' ',' '[' listof_stmt ']' ')' | While '(' expr ',' '[' listof_stmt ']' ',' '[' listof_stmt ']' ')' | If '(' expr ',' '[' listof_stmt ']' ',' '[' listof_stmt ']' ')' | With '(' '[' listof_withitem ']' ',' '[' listof_stmt ']' ')' | Raise '(' optional_expr ',' optional_expr ')' | Try '(' '[' listof_stmt ']' ',' '[' listof_excepthandler ']' ',' '[' listof_stmt ']' ',' '[' listof_stmt ']' ')' | Assert '(' expr ',' optional_expr ')' | Import '(' '[' listof_alias ']' ')' | ImportFrom '(' optional_identifier ',' '[' listof_alias ']' ',' optional_object ')' | Global '(' '[' listof_identifier ']' ')' | Nonlocal '(' '[' listof_identifier ']' ')' | Expr '(' expr ')' | Pass '(' ')' | Break '(' ')' | Continue '(' ')' ;
expr : BoolOp '(' boolop ',' '[' listof_expr ']' ')' | BinOp '(' expr ',' operator ',' expr ')' | UnaryOp '(' unaryop ',' expr ')' | Lambda '(' arguments ',' expr ')' | IfExp '(' expr ',' expr ',' expr ')' | Dict '(' '[' listof_expr ']' ',' '[' listof_expr ']' ')' | Set '(' '[' listof_expr ']' ')' | ListComp '(' expr ',' '[' listof_comprehension ']' ')' | SetComp '(' expr ',' '[' listof_comprehension ']' ')' | DictComp '(' expr ',' expr ',' '[' listof_comprehension ']' ')' | GeneratorExp '(' expr ',' '[' listof_comprehension ']' ')' | Yield '(' optional_expr ')' | YieldFrom '(' expr ')' | Compare '(' expr ',' '[' listof_cmpop ']' ',' '[' listof_expr ']' ')' | Call '(' expr ',' '[' listof_expr ']' ',' '[' listof_keyword ']' ',' optional_expr ',' optional_expr ')' | Num '(' object ')' | Str '(' string ')' | Bytes '(' 'b' string ')' | NameConstant '(' singleton ')' | Ellipsis '(' ')' | Attribute '(' expr ',' string ',' expr_context ')' | Subscript '(' expr ',' slice ',' expr_context ')' | Starred '(' expr ',' expr_context ')' | Name '(' string ',' expr_context ')' | List '(' '[' listof_expr ']' ',' expr_context ')' | Tuple '(' '[' listof_expr ']' ',' expr_context ')' ;
expr_context : Load '(' ')' | Store '(' ')' | Del '(' ')' | AugLoad '(' ')' | AugStore '(' ')' | Param '(' ')' ;
slice : Slice '(' optional_expr ',' optional_expr ',' optional_expr ')' | ExtSlice '(' '[' listof_slice ']' ')' | Index '(' expr ')' ;
boolop : And '(' ')' | Or '(' ')' ;
operator : Add '(' ')' | Sub '(' ')' | Mult '(' ')' | Div '(' ')' | Mod '(' ')' | Pow '(' ')' | LShift '(' ')' | RShift '(' ')' | BitOr '(' ')' | BitXor '(' ')' | BitAnd '(' ')' | FloorDiv '(' ')' ;
unaryop : Invert '(' ')' | Not '(' ')' | UAdd '(' ')' | USub '(' ')' ;
cmpop : Eq '(' ')' | NotEq '(' ')' | Lt '(' ')' | LtE '(' ')' | Gt '(' ')' | GtE '(' ')' | Is '(' ')' | IsNot '(' ')' | In '(' ')' | NotIn '(' ')' ;
comprehension : comprehension_ '(' expr ',' expr ',' '[' listof_expr ']' ')' ;
excepthandler : ExceptHandler '(' optional_expr ',' optional_identifier ',' '[' listof_stmt ']' ')' ;
arguments : arguments_ '(' '[' listof_arg ']' ',' optional_arg ',' '[' listof_arg ']' ',' '[' listof_expr ']' ',' optional_arg ',' '[' listof_expr ']' ')' ;
arg : arg_ '(' string ',' optional_expr ')' ;
keyword : keyword_ '(' string ',' expr ')' ;
alias : alias_ '(' string ',' optional_identifier ')' ;
withitem : withitem_ '(' expr ',' optional_expr ')' ;

optional_expr : expr | None ;
optional_identifier : string | None ;
optional_object : object | None ;
optional_arg : arg | None ;

listof_stmt : stmt ',' listof_stmt | ;
listof_expr : expr ',' listof_expr | ;
listof_keyword : keyword ',' listof_keyword | ;
listof_withitem : withitem ',' listof_withitem | ;
listof_excepthandler : excepthandler ',' listof_excepthandler | ;
listof_alias : alias ',' listof_alias | ;
listof_identifier : string ',' listof_identifier | ;
listof_comprehension : comprehension ',' listof_comprehension | ;
listof_cmpop : cmpop ',' listof_cmpop | ;
listof_slice : slice ',' listof_slice | ;
listof_arg : arg ',' listof_arg | ;
