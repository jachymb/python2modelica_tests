mod                  : Module LPAREN LBRACE listof_stmt RBRACE RPAREN
                       { (absyntree)[mod] = Absyn.MODULE($4[listof_stmt]); }

stmt                 : FunctionDef LPAREN string COMMA arguments COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_expr RBRACE COMMA optional_expr RPAREN
                       { $$[stmt] = Absyn.FUNCTIONDEF($3[string], $5[arguments], $8[listof_stmt], $12[listof_expr], $15[optional_expr]); }
                     | ClassDef LPAREN string COMMA LBRACE listof_expr RBRACE COMMA LBRACE listof_keyword RBRACE COMMA optional_expr COMMA optional_expr COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[stmt] = Absyn.CLASSDEF($3[string], $6[listof_expr], $10[listof_keyword], $13[optional_expr], $15[optional_expr], $18[listof_stmt], $22[listof_expr]); }
                     | Return LPAREN optional_expr RPAREN
                       { $$[stmt] = Absyn.RETURN($3[optional_expr]); }
                     | Delete LPAREN LBRACE listof_expr RBRACE RPAREN
                       { $$[stmt] = Absyn.DELETE($4[listof_expr]); }
                     | Assign LPAREN LBRACE listof_expr RBRACE COMMA expr RPAREN
                       { $$[stmt] = Absyn.ASSIGN($4[listof_expr], $7[expr]); }
                     | AugAssign LPAREN expr COMMA pyoperator COMMA expr RPAREN
                       { $$[stmt] = Absyn.AUGASSIGN($3[expr], $5[pyoperator], $7[expr]); }
                     | For LPAREN expr COMMA expr COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[stmt] = Absyn.FOR($3[expr], $5[expr], $8[listof_stmt], $12[listof_stmt]); }
                     | While LPAREN expr COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[stmt] = Absyn.WHILE($3[expr], $6[listof_stmt], $10[listof_stmt]); }
                     | If LPAREN expr COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[stmt] = Absyn.IF($3[expr], $6[listof_stmt], $10[listof_stmt]); }
                     | With LPAREN LBRACE listof_withitem RBRACE COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[stmt] = Absyn.WITH($4[listof_withitem], $8[listof_stmt]); }
                     | Raise LPAREN optional_expr COMMA optional_expr RPAREN
                       { $$[stmt] = Absyn.RAISE($3[optional_expr], $5[optional_expr]); }
                     | Try LPAREN LBRACE listof_stmt RBRACE COMMA LBRACE listof_excepthandler RBRACE COMMA LBRACE listof_stmt RBRACE COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[stmt] = Absyn.TRY($4[listof_stmt], $8[listof_excepthandler], $12[listof_stmt], $16[listof_stmt]); }
                     | Assert LPAREN expr COMMA optional_expr RPAREN
                       { $$[stmt] = Absyn.ASSERT($3[expr], $5[optional_expr]); }
                     | Import LPAREN LBRACE listof_alias RBRACE RPAREN
                       { $$[stmt] = Absyn.IMPORT($4[listof_alias]); }
                     | ImportFrom LPAREN optional_identifier COMMA LBRACE listof_alias RBRACE COMMA optional_object RPAREN
                       { $$[stmt] = Absyn.IMPORTFROM($3[optional_identifier], $6[listof_alias], $9[optional_object]); }
                     | Global LPAREN LBRACE listof_identifier RBRACE RPAREN
                       { $$[stmt] = Absyn.GLOBAL($4[listof_identifier]); }
                     | Nonlocal LPAREN LBRACE listof_identifier RBRACE RPAREN
                       { $$[stmt] = Absyn.NONLOCAL($4[listof_identifier]); }
                     | Expr LPAREN expr RPAREN
                       { $$[stmt] = Absyn.EXPR($3[expr]); }
                     | Pass LPAREN RPAREN
                       { $$[stmt] = Absyn.PASS(); }
                     | Break LPAREN RPAREN
                       { $$[stmt] = Absyn.BREAK(); }
                     | Continue LPAREN RPAREN
                       { $$[stmt] = Absyn.CONTINUE(); }

expr                 : BoolOp LPAREN boolop COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[expr] = Absyn.BOOLOP($3[boolop], $6[listof_expr]); }
                     | BinOp LPAREN expr COMMA pyoperator COMMA expr RPAREN
                       { $$[expr] = Absyn.BINOP($3[expr], $5[pyoperator], $7[expr]); }
                     | UnaryOp LPAREN unaryop COMMA expr RPAREN
                       { $$[expr] = Absyn.UNARYOP($3[unaryop], $5[expr]); }
                     | Lambda LPAREN arguments COMMA expr RPAREN
                       { $$[expr] = Absyn.LAMBDA($3[arguments], $5[expr]); }
                     | IfExp LPAREN expr COMMA expr COMMA expr RPAREN
                       { $$[expr] = Absyn.IFEXP($3[expr], $5[expr], $7[expr]); }
                     | Dict LPAREN LBRACE listof_expr RBRACE COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[expr] = Absyn.DICT($4[listof_expr], $8[listof_expr]); }
                     | Set LPAREN LBRACE listof_expr RBRACE RPAREN
                       { $$[expr] = Absyn.SET($4[listof_expr]); }
                     | ListComp LPAREN expr COMMA LBRACE listof_comprehension RBRACE RPAREN
                       { $$[expr] = Absyn.LISTCOMP($3[expr], $6[listof_comprehension]); }
                     | SetComp LPAREN expr COMMA LBRACE listof_comprehension RBRACE RPAREN
                       { $$[expr] = Absyn.SETCOMP($3[expr], $6[listof_comprehension]); }
                     | DictComp LPAREN expr COMMA expr COMMA LBRACE listof_comprehension RBRACE RPAREN
                       { $$[expr] = Absyn.DICTCOMP($3[expr], $5[expr], $8[listof_comprehension]); }
                     | GeneratorExp LPAREN expr COMMA LBRACE listof_comprehension RBRACE RPAREN
                       { $$[expr] = Absyn.GENERATOREXP($3[expr], $6[listof_comprehension]); }
                     | Yield LPAREN optional_expr RPAREN
                       { $$[expr] = Absyn.YIELD($3[optional_expr]); }
                     | YieldFrom LPAREN expr RPAREN
                       { $$[expr] = Absyn.YIELDFROM($3[expr]); }
                     | Compare LPAREN expr COMMA LBRACE listof_cmpop RBRACE COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[expr] = Absyn.COMPARE($3[expr], $6[listof_cmpop], $10[listof_expr]); }
                     | Call LPAREN expr COMMA LBRACE listof_expr RBRACE COMMA LBRACE listof_keyword RBRACE COMMA optional_expr COMMA optional_expr RPAREN
                       { $$[expr] = Absyn.CALL($3[expr], $6[listof_expr], $10[listof_keyword], $13[optional_expr], $15[optional_expr]); }
                     | Num LPAREN object RPAREN
                       { $$[expr] = Absyn.NUM($3[object]); }
                     | Str LPAREN string RPAREN
                       { $$[expr] = Absyn.STR($3[string]); }
                     | Bytes LPAREN B string RPAREN
                       { $$[expr] = Absyn.BYTES($4[string]); }
                     | NameConstant LPAREN singleton RPAREN
                       { $$[expr] = Absyn.NAMECONSTANT($3[singleton]); }
                     | Ellipsis LPAREN RPAREN
                       { $$[expr] = Absyn.ELLIPSIS(); }
                     | Attribute LPAREN expr COMMA string COMMA expr_context RPAREN
                       { $$[expr] = Absyn.ATTRIBUTE($3[expr], $5[string], $7[expr_context]); }
                     | Subscript LPAREN expr COMMA slice COMMA expr_context RPAREN
                       { $$[expr] = Absyn.SUBSCRIPT($3[expr], $5[slice], $7[expr_context]); }
                     | Starred LPAREN expr COMMA expr_context RPAREN
                       { $$[expr] = Absyn.STARRED($3[expr], $5[expr_context]); }
                     | Name LPAREN string COMMA expr_context RPAREN
                       { $$[expr] = Absyn.NAME($3[string], $5[expr_context]); }
                     | List LPAREN LBRACE listof_expr RBRACE COMMA expr_context RPAREN
                       { $$[expr] = Absyn.LIST($4[listof_expr], $7[expr_context]); }
                     | Tuple LPAREN LBRACE listof_expr RBRACE COMMA expr_context RPAREN
                       { $$[expr] = Absyn.TUPLE($4[listof_expr], $7[expr_context]); }

expr_context         : Load LPAREN RPAREN
                       { $$[expr_context] = Absyn.LOAD(); }
                     | Store LPAREN RPAREN
                       { $$[expr_context] = Absyn.STORE(); }
                     | Del LPAREN RPAREN
                       { $$[expr_context] = Absyn.DEL(); }
                     | AugLoad LPAREN RPAREN
                       { $$[expr_context] = Absyn.AUGLOAD(); }
                     | AugStore LPAREN RPAREN
                       { $$[expr_context] = Absyn.AUGSTORE(); }
                     | Param LPAREN RPAREN
                       { $$[expr_context] = Absyn.PARAM(); }

slice                : Slice LPAREN optional_expr COMMA optional_expr COMMA optional_expr RPAREN
                       { $$[slice] = Absyn.SLICE($3[optional_expr], $5[optional_expr], $7[optional_expr]); }
                     | ExtSlice LPAREN LBRACE listof_slice RBRACE RPAREN
                       { $$[slice] = Absyn.EXTSLICE($4[listof_slice]); }
                     | Index LPAREN expr RPAREN
                       { $$[slice] = Absyn.INDEX($3[expr]); }

boolop               : OpAnd LPAREN RPAREN
                       { $$[boolop] = Absyn.OPAND(); }
                     | OpOr LPAREN RPAREN
                       { $$[boolop] = Absyn.OPOR(); }

pyoperator           : OpAdd LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPADD(); }
                     | OpSub LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPSUB(); }
                     | OpMult LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPMULT(); }
                     | OpDiv LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPDIV(); }
                     | OpMod LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPMOD(); }
                     | OpPow LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPPOW(); }
                     | OpLShift LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPLSHIFT(); }
                     | OpRShift LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPRSHIFT(); }
                     | OpBitOr LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPBITOR(); }
                     | OpBitXor LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPBITXOR(); }
                     | OpBitAnd LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPBITAND(); }
                     | OpFloorDiv LPAREN RPAREN
                       { $$[pyoperator] = Absyn.OPFLOORDIV(); }

unaryop              : OpInvert LPAREN RPAREN
                       { $$[unaryop] = Absyn.OPINVERT(); }
                     | OpNot LPAREN RPAREN
                       { $$[unaryop] = Absyn.OPNOT(); }
                     | OpUAdd LPAREN RPAREN
                       { $$[unaryop] = Absyn.OPUADD(); }
                     | OpUSub LPAREN RPAREN
                       { $$[unaryop] = Absyn.OPUSUB(); }

cmpop                : OpEq LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPEQ(); }
                     | OpNotEq LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPNOTEQ(); }
                     | OpLt LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPLT(); }
                     | OpLtE LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPLTE(); }
                     | OpGt LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPGT(); }
                     | OpGtE LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPGTE(); }
                     | OpIs LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPIS(); }
                     | OpIsNot LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPISNOT(); }
                     | OpIn LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPIN(); }
                     | OpNotIn LPAREN RPAREN
                       { $$[cmpop] = Absyn.OPNOTIN(); }

comprehension        : comprehension_ LPAREN expr COMMA expr COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[comprehension] = Absyn.COMPREHENSION($3[expr], $5[expr], $8[listof_expr]); }

excepthandler        : ExceptHandler LPAREN optional_expr COMMA optional_identifier COMMA LBRACE listof_stmt RBRACE RPAREN
                       { $$[excepthandler] = Absyn.EXCEPTHANDLER($3[optional_expr], $5[optional_identifier], $8[listof_stmt]); }

arguments            : arguments_ LPAREN LBRACE listof_arg RBRACE COMMA optional_arg COMMA LBRACE listof_arg RBRACE COMMA LBRACE listof_expr RBRACE COMMA optional_arg COMMA LBRACE listof_expr RBRACE RPAREN
                       { $$[arguments] = Absyn.ARGUMENTS($4[listof_arg], $7[optional_arg], $10[listof_arg], $14[listof_expr], $17[optional_arg], $20[listof_expr]); }

arg                  : arg_ LPAREN string COMMA optional_expr RPAREN
                       { $$[arg] = Absyn.ARG($3[string], $5[optional_expr]); }

keyword              : keyword_ LPAREN string COMMA expr RPAREN
                       { $$[keyword] = Absyn.KEYWORD($3[string], $5[expr]); }

alias                : alias_ LPAREN string COMMA optional_identifier RPAREN
                       { $$[alias] = Absyn.ALIAS($3[string], $5[optional_identifier]); }

withitem             : withitem_ LPAREN expr COMMA optional_expr RPAREN
                       { $$[withitem] = Absyn.WITHITEM($3[expr], $5[optional_expr]); }

singleton            : True
                       { $$[singleton] = Absyn.TRUE(); }
                     | False
                       { $$[singleton] = Absyn.FALSE(); }
                     | None
                       { $$[singleton] = Absyn.PYNONE(); }

optional_expr        : expr
                       { $$[Option<expr>] = SOME($1); }
                     | None
                       { $$[Option<expr>] = NONE(); }

optional_identifier  : string
                       { $$[Option<String>] = SOME($1); }
                     | None
                       { $$[Option<String>] = NONE(); }

optional_object      : object
                       { $$[Option<String>] = SOME($1); }
                     | None
                       { $$[Option<String>] = NONE(); }

optional_arg         : arg
                       { $$[Option<arg>] = SOME($1); }
                     | None
                       { $$[Option<arg>] = NONE(); }

listof_stmt          : stmt COMMA listof_stmt
                       { $$[list<stmt>] = $1[stmt]::$3[listof_stmt]; }
                     | stmt
                       { $$[list<stmt>] = $1[stmt]::{}; }
                     | 
                       { $$[list<stmt>] = {}; }

listof_expr          : expr COMMA listof_expr
                       { $$[list<expr>] = $1[expr]::$3[listof_expr]; }
                     | expr
                       { $$[list<expr>] = $1[expr]::{}; }
                     | 
                       { $$[list<expr>] = {}; }

listof_keyword       : keyword COMMA listof_keyword
                       { $$[list<keyword>] = $1[keyword]::$3[listof_keyword]; }
                     | keyword
                       { $$[list<keyword>] = $1[keyword]::{}; }
                     | 
                       { $$[list<keyword>] = {}; }

listof_withitem      : withitem COMMA listof_withitem
                       { $$[list<withitem>] = $1[withitem]::$3[listof_withitem]; }
                     | withitem
                       { $$[list<withitem>] = $1[withitem]::{}; }
                     | 
                       { $$[list<withitem>] = {}; }

listof_excepthandler : excepthandler COMMA listof_excepthandler
                       { $$[list<excepthandler>] = $1[excepthandler]::$3[listof_excepthandler]; }
                     | excepthandler
                       { $$[list<excepthandler>] = $1[excepthandler]::{}; }
                     | 
                       { $$[list<excepthandler>] = {}; }

listof_alias         : alias COMMA listof_alias
                       { $$[list<alias>] = $1[alias]::$3[listof_alias]; }
                     | alias
                       { $$[list<alias>] = $1[alias]::{}; }
                     | 
                       { $$[list<alias>] = {}; }

listof_identifier    : string COMMA listof_identifier
                       { $$[list<String>] = $1[String]::$3[listof_identifier]; }
                     | string
                       { $$[list<String>] = $1[String]::{}; }
                     | 
                       { $$[list<String>] = {}; }

listof_comprehension : comprehension COMMA listof_comprehension
                       { $$[list<comprehension>] = $1[comprehension]::$3[listof_comprehension]; }
                     | comprehension
                       { $$[list<comprehension>] = $1[comprehension]::{}; }
                     | 
                       { $$[list<comprehension>] = {}; }

listof_cmpop         : cmpop COMMA listof_cmpop
                       { $$[list<cmpop>] = $1[cmpop]::$3[listof_cmpop]; }
                     | cmpop
                       { $$[list<cmpop>] = $1[cmpop]::{}; }
                     | 
                       { $$[list<cmpop>] = {}; }

listof_slice         : slice COMMA listof_slice
                       { $$[list<slice>] = $1[slice]::$3[listof_slice]; }
                     | slice
                       { $$[list<slice>] = $1[slice]::{}; }
                     | 
                       { $$[list<slice>] = {}; }

listof_arg           : arg COMMA listof_arg
                       { $$[list<arg>] = $1[arg]::$3[listof_arg]; }
                     | arg
                       { $$[list<arg>] = $1[arg]::{}; }
                     | 
                       { $$[list<arg>] = {}; }

